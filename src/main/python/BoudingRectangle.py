import cv2
import numpy as np 
import os.path
import time
from enum import Enum

current_milli_time = lambda: int(round(time.time() * 1000))



 
def isWhithinRange(value, expected, tolerence):
    upperLimit = expected + tolerence
    lowerLimit = expected - tolerence

    if (value > lowerLimit) & (value < upperLimit):
        return True
    else:
        return False

def contourTracingShit(aspect_ratio, extent, area, imageToMarkup, c, x, y, w, h):
    # get the min area rect
    rect = cv2.minAreaRect(c)
    box = cv2.boxPoints(rect)
    # convert all coordinates floating point values to int
    box = np.int0(box)

    topmiddlepoint = findTheTopMiddleOfAbox(box)

    # Draw a circle at the point to aim at - TODO POST THIS TO NETWORK TABLES
    cv2.circle(imageToMarkup, (topmiddlepoint[0], topmiddlepoint[1]), 3, (255,100,255), thickness=6, lineType=8, shift=0)

    # draw a red 'nghien' rectangle
    cv2.drawContours(imageToMarkup, [box], 0, (0, 0, 255))

    print("Top middle of the contour is at %s" % topmiddlepoint)

def findTheTopMiddleOfAbox(box):
    boxSorted = box[box[:,1].argsort()]
    point1 = [boxSorted[0][0], boxSorted[0][1]]
    point2 = [boxSorted[1][0], boxSorted[1][1]]
    delta_points = [point2[0] - point1[0], point2[1]-point1[1]]
    output_point = [0,0]
    output_point[0] = point1[0] + delta_points[0]/2
    output_point[1] = point1[1] + delta_points[1]/2
    return output_point

class GripPipeline:
    """
    An OpenCV pipeline generated by GRIP.
    """
    
    def __init__(self):
        """initializes all values to presets or None if need to be set
        """

        self.__hsv_threshold_hue = [43.70503597122302, 86.79117147707979]
        self.__hsv_threshold_saturation = [139.88309352517985, 255.0]
        self.__hsv_threshold_value = [96.31294964028778, 255.0]

        self.hsv_threshold_output = None

        self.__find_contours_input = self.hsv_threshold_output
        self.__find_contours_external_only = False

        self.find_contours_output = None


    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step HSV_Threshold0:
        self.__hsv_threshold_input = source0
        (self.hsv_threshold_output) = self.__hsv_threshold(self.__hsv_threshold_input, self.__hsv_threshold_hue, self.__hsv_threshold_saturation, self.__hsv_threshold_value)

        # Step Find_Contours0:
        self.__find_contours_input = self.hsv_threshold_output
        (self.find_contours_output) = self.__find_contours(self.__find_contours_input, self.__find_contours_external_only)


    @staticmethod
    def __hsv_threshold(input, hue, sat, val):
        """Segment an image based on hue, saturation, and value ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max value.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HSV)
        return cv2.inRange(out, (hue[0], sat[0], val[0]),  (hue[1], sat[1], val[1]))

    @staticmethod
    def __find_contours(input, external_only):
        """Sets the values of pixels in a binary image to their distance to the nearest black pixel.
        Args:
            input: A numpy.ndarray.
            external_only: A boolean. If true only external contours are found.
        Return:
            A list of numpy.ndarray where each one represents a contour.
        """
        if(external_only):
            mode = cv2.RETR_EXTERNAL
        else:
            mode = cv2.RETR_LIST
        method = cv2.CHAIN_APPROX_SIMPLE
        im2, contours, hierarchy =cv2.findContours(input, mode=mode, method=method)
        return contours


img = cv2.pyrDown(cv2.imread("images/2019/LoadingStraightDark48in.jpg", cv2.IMREAD_UNCHANGED))



pipeline = GripPipeline
pipeline.process(img)
print(find_contours_output)


cv2.waitKey(0)

cv2.destroyAllWindows()